<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++基础（五）</title>
    <url>/2020/04/03/C++%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-基础（五）"><a href="#C-基础（五）" class="headerlink" title="C++基础（五）"></a>C++基础（五）</h1><h2 id="Chapter6函数基础"><a href="#Chapter6函数基础" class="headerlink" title="Chapter6函数基础"></a>Chapter6函数基础</h2><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><p>返回类型（不能是数组）、函数名、形参列表（形参和实参转换）、函数体</p>
<h4 id="局部对象：会隐藏外层作用域中同名声明"><a href="#局部对象：会隐藏外层作用域中同名声明" class="headerlink" title="局部对象：会隐藏外层作用域中同名声明"></a>局部对象：会隐藏外层作用域中同名声明</h4><p>自动对象：只存在于块执行期间的对象，如形参</p>
<p>静态局部对象：static类型，在程序执行期间始终存在</p>
<h4 id="函数声明和分离式编译"><a href="#函数声明和分离式编译" class="headerlink" title="函数声明和分离式编译"></a>函数声明和分离式编译</h4><p>函数放在源文件中，声明放在头文件中，可以分开编译多个源文件，然后链接成可执行文件</p>
<p>比如：文件fact.cc和factMain.cc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -c factMain.cc      #生成factMain.o</span><br><span class="line">g++ -c fact.cc          #生成fact.o</span><br><span class="line">g++ factMain.o fact.o    #生成factMain.exe/a.out</span><br><span class="line">g++ factMain.o fact.o -o main   #生成main/main.exe</span><br></pre></td></tr></table></figure>

<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a><strong>参数传递</strong></h3><p>参数传递=利用实参初始化形参，规则和变量初始化一致，包括以下几种传递方式</p>
<h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p>实参赋值给形参，不可改变实参值，指针也属于值传递（不可改变实参指针值，但可以改变指针指向值）</p>
<h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p>形参引用实参，可改变实参值，可避免拷贝初始化（类），作为返回多个值的一种方式</p>
<h4 id="const形参或实参"><a href="#const形参或实参" class="headerlink" title="const形参或实参"></a>const形参或实参</h4><p>参考顶层const的初始化规则：</p>
<p>const形参可以接收普通变量、字面值、类型转换值，非const只接收普通类型，</p>
<p>所以尽量使用const类型形参，可以接收更广范围的形参。</p>
<h4 id="数组传递"><a href="#数组传递" class="headerlink" title="数组传递"></a>数组传递</h4><p>数组的两个性质：不允许拷贝、使用时通常转为指针</p>
<p>实际上是指针值传递，不知道尺寸，以下有几种传递尺寸的方式：</p>
<ul>
<li>结束标志：C_str以空字符结尾</li>
<li>标准库规范：使用begin和end指针</li>
<li>显示传递大小值：size_t</li>
</ul>
<p>数组引用传递：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pirnt</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])</span></span>;    <span class="comment">//注意括号和维度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pirnt</span><span class="params">(<span class="keyword">int</span> &amp;arr[<span class="number">10</span>])</span></span>;      <span class="comment">//此时传递包含10个引用的数组</span></span><br></pre></td></tr></table></figure>

<p>多维数组传递：传递指向数组首元素的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> (*matrix)[<span class="number">10</span>],<span class="keyword">int</span> rowSize)</span></span>;<span class="comment">//注意括号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *matrix[<span class="number">10</span>],<span class="keyword">int</span> rowSize)</span></span>;<span class="comment">//10个指针的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="main函数参数"><a href="#main函数参数" class="headerlink" title="main函数参数"></a>main函数参数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argc[])</span></span>&#123;&#125;   <span class="comment">//argc=字符串数量</span></span><br><span class="line">									<span class="comment">//argv=C_str指针数组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">prog <span class="literal">-d</span> <span class="literal">-o</span> ofile <span class="keyword">data</span>0</span><br></pre></td></tr></table></figure>

<p>对于以上命令，argc=5，argv包含5个参数，其中argc[0]是程序名字，真正的实参从argv[1]开始</p>
<h4 id="可变形参函数"><a href="#可变形参函数" class="headerlink" title="可变形参函数"></a>可变形参函数</h4><p>参数数量未知时，可以使用三种方法，前两者是C++11标准</p>
<ul>
<li>实参类型相同，使用initializer_list标准库类型</li>
<li>实参类型不同，使用可变参数模板</li>
<li>省略符形参</li>
</ul>
<h5 id="initializer-list形参"><a href="#initializer-list形参" class="headerlink" title="initializer_list形参"></a>initializer_list形参</h5><h5 id="操作：基本类似vector，但是元素是const"><a href="#操作：基本类似vector，但是元素是const" class="headerlink" title="操作：基本类似vector，但是元素是const"></a>操作：基本类似vector，但是<strong>元素是const</strong></h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">initializer_list</span>&lt;T&gt; lst;     <span class="comment">//默认初始化</span></span><br><span class="line"><span class="built_in">initializer_list</span>&lt;T&gt; lst&#123;a,b,c&#125;;    <span class="comment">//列表初始化，副本、const</span></span><br><span class="line">lst2&#123;lst&#125;;        <span class="comment">//拷贝或赋值不会拷贝列表中元素，而是原始列表和副本</span></span><br><span class="line">lst2 = lst;       <span class="comment">//共享参数</span></span><br><span class="line">lst.<span class="built_in">size</span>();</span><br><span class="line">lst.<span class="built_in">begin</span>();</span><br><span class="line">lst.<span class="built_in">end</span>();</span><br></pre></td></tr></table></figure>

<p>也可以同时拥有其他形参，如ErrCode形参表示不同类型的错误</p>
<h5 id="省略符形参"><a href="#省略符形参" class="headerlink" title="省略符形参"></a>省略符形参</h5><p>为了访问一些C代码设置，但是难以正确拷贝</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(parm_list, ...)</span></span>;     <span class="comment">//parm_list执行类型检查，逗号可								  //选，...不执行类型检查</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(...)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="返回类型和return"><a href="#返回类型和return" class="headerlink" title="返回类型和return"></a><strong>返回类型和return</strong></h3><h4 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h4><p>reutrn或return void或省略</p>
<h4 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h4><p>return对应类型，而且必须保证函数结束前有返回值。</p>
<p>返回值方式：和初始化变量/形参方式相同，返回引用时返回对象别名</p>
<p>不要返回局部对象的指针或引用：局部变量会被释放</p>
<p>调用运算符的优先级和点运算符、箭头运算符相同，左结合律，可用如下形式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">fun().mem()     <span class="comment">//在调用运算符后使用点运算符/箭头运算符</span></span><br></pre></td></tr></table></figure>

<p>引用回返回左值（带地址对象），其他返回类型返回右值（不带地址的对象），因为引用的内容原本就存在内存中。</p>
<p>返回vector或类对象可以用花括号列表初始化。</p>
<p>主函数返回值：非void类型时可以不return（相当于自动return 0，表示执行成功，非0值由机器定义）。头文件castdlib中有EXIT_FAILURE或EXIT_SUCCESS预处理变量可以返回。</p>
<p>函数可以递归调用</p>
<h4 id="返回数组指针"><a href="#返回数组指针" class="headerlink" title="返回数组指针"></a>返回数组指针</h4><p>不能返回数组（数组不能被拷贝），可以返回数组指针或引用。形式如下：</p>
<p>Type (*function(param_list)) [dimension]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*func(<span class="keyword">int</span> i)) [<span class="number">10</span>];    <span class="comment">//得到一个int[10]数组指针</span></span><br></pre></td></tr></table></figure>

<p>尾置返回类型：C++11</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">auto func(int i) -&gt; int(*)[10];</span><br></pre></td></tr></table></figure>

<p>使用decltype</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> odd[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">decltype</span>(odd) *arrPtr(<span class="keyword">int</span> i)&#123;&#125;; <span class="comment">//注意*号，decltype不会返回指针</span></span><br></pre></td></tr></table></figure>

<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a><strong>函数重载</strong></h3><p>函数名相同但形参列表不同，编译器回根据实参类型推断（main函数不能重载）</p>
<p>定义：</p>
<ul>
<li>只有返回值不同不算</li>
<li>有没有名字不算</li>
<li>形参顶层const不算</li>
<li>形参底层const可以算（非const实参优先选底层非const形参的函数）</li>
</ul>
<p>const_cast（强制类型转换关键字）和重载，见以下实例。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">shorterString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> s1,<span class="keyword">const</span> <span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">shorterString</span><span class="params">(<span class="built_in">string</span> &amp;s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = shorterString(constr_cast&lt;<span class="keyword">const</span> <span class="built_in">string</span>&gt;(s1),</span><br><span class="line">                           constr_cast&lt;<span class="keyword">const</span> <span class="built_in">string</span>&gt;(s2));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="built_in">string</span>&amp;&gt;(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类型转换的过程：非常量引用-&gt;常量引用-&gt;常量引用-&gt;非常量引用</p>
<p>本质上还是非常量引用，没有改变初始类型，所以是安全的。</p>
<p>调用重载函数：当参数数量相同而类型可转换时（后面讲）</p>
<ul>
<li>最佳匹配</li>
<li>无匹配</li>
<li>二义性</li>
</ul>
<h4 id="重载和作用域"><a href="#重载和作用域" class="headerlink" title="重载和作用域"></a>重载和作用域</h4><p>新作用域如果有同名变量/函数，会隐藏外层变量而。而不是内外层变量重载。</p>
<p>即先找名字、后检查类型（变量类型可以屏蔽外层函数名）</p>
<h3 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a><strong>特殊用途语言特性</strong></h3><h4 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h4><p>默认值应当放在末尾：</p>
<ul>
<li>某个形参赋予默认值，后面所有形参都应该有默认值</li>
<li>调用时只能省略尾部的实参，且按位置解析。</li>
</ul>
<p>默认实参声明，通常在头文件中，默认值只声明一次，多次声明同函数不同实参（不重复）默认值来添加默认值，如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">string screen(sz,sz,char = '');</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(sz=<span class="number">24</span>,sz=<span class="number">80</span>,<span class="keyword">char</span>)</span></span>;     <span class="comment">//添加默认实参</span></span><br><span class="line">string screen(sz,sz,char = '');      //错误，重复</span><br></pre></td></tr></table></figure>

<h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><p>较短的函数，可以使用内联声明来避免调用开销，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">incline <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a&gt;b?:a:b&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(a,b) &lt;&lt;<span class="built_in">endl</span>;     <span class="comment">//编译时会展开如下</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a&gt;b?:a:b) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<h4 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h4><p>返回类型、形参类型是字面值类型，只能有一条return</p>
<p>允许constexpr函数返回非常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> <span class="title">scale</span><span class="params">(<span class="keyword">size_t</span> cnt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> new_sz()*cnt;</span><br><span class="line">&#125;<span class="comment">//当cnt不是常量时返回非常量表达式，但不能用在需要constexpr的地方</span></span><br></pre></td></tr></table></figure>

<h4 id="调试帮助"><a href="#调试帮助" class="headerlink" title="调试帮助"></a>调试帮助</h4><p>用于屏蔽一段调试代码。</p>
<p>assert预处理宏</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">assert(expr);     <span class="comment">//expr为真时什么也不做，否则终止程序</span></span><br></pre></td></tr></table></figure>

<p>NDEBUG预处理变量</p>
<p>定义了NDEBUG时assert无效，定义方式如下：</p>
<ul>
<li>#define</li>
<li>命令行选项： g++ -D NDEBUG main.C</li>
</ul>
<p>自行使用NDEBUG编写条件调试代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifnde NDEBUG</span></span><br><span class="line">	<span class="built_in">cerr</span> &lt;&lt; __func__ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//__func__是局部静态变量，存放函数名</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>C++程序调试名字：</p>
<ul>
<li>_ _ <em>FILE</em> _ _存放文件名字符串字面值3</li>
<li>_ _ <em>LINE</em> _ _存放当前行号整型字面值</li>
<li>_ _ <em>TIME</em> _ _存放文件编译时间字符串字面值</li>
<li>_ _ <em>DATE</em> _ _存放文件编译日期字符串字面值</li>
</ul>
<h3 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a><strong>函数匹配</strong></h3><p>候选函数(名称相同，调用点可见)-&gt;可行函数(参数数量相等，类型相同或可转换)</p>
<p>寻找最佳匹配（类型越接近越好）</p>
<ul>
<li>有默认实参的传入实参数量应当少于使用数量</li>
<li>类型越接近，匹配的越好</li>
<li>匹配成功：每个实参匹配都不劣于其他函数，至少有一个实参匹配优于其他可行函数。否则报二义性错误</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span> = <span class="number">3.14</span>)</span></span>;</span><br><span class="line">f(<span class="number">5.6</span>);         <span class="comment">//选4</span></span><br><span class="line">f(<span class="number">42</span>,<span class="number">2.56</span>);     <span class="comment">//二义性错误，3和4</span></span><br></pre></td></tr></table></figure>

<p>实参类型转换：匹配分级</p>
<ul>
<li>最佳匹配：实参和形参类型相同/实参从数组或函数类型转成对应指针/向实参中添加或删除顶层const</li>
<li>const转换</li>
<li>类型提升</li>
<li>算数类型转换或指针转换</li>
<li>类类型转换</li>
</ul>
<p>类型提升：指整型提升，char-&gt;short-&gt;int，一般会直接提升为int，而忽略short</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ff</span><span class="params">(short)</span></span>;</span><br><span class="line">ff(<span class="string">'a'</span>);    <span class="comment">//直接提升为int,调用ff(int)</span></span><br></pre></td></tr></table></figure>

<p>算数类型转化：所有类型转换级别都一样</p>
<ul>
<li>int-&gt;unsigned int和int-&gt;double 同级</li>
<li>double-&gt;float和double-&gt;long同级</li>
</ul>
<p>函数匹配和const实参：</p>
<ul>
<li>普通引用不能绑定const对象</li>
<li>非常量和非常量精确匹配</li>
</ul>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a><strong>函数指针</strong></h3><p>用指针代替函数名，两端括号不可少</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> (*pf)(para_list);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<ul>
<li>赋值</li>
<li>直接使用指针调用函数</li>
<li>可以赋值0或nullptr</li>
</ul>
<p>重载函数的指针：形参列表必须精确匹配</p>
<p>函数指针作形参：会自动转成指针类型使用，但形参要写成指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">useBigger</span><span class="params">(para_list,<span class="keyword">bool</span> (*pf)(para_list1))</span></span>;</span><br></pre></td></tr></table></figure>

<p>可以使用类型别名、decltype来简化使用</p>
<p>函数指针作返回值：返回值要写成指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> F = <span class="keyword">int</span>(<span class="keyword">int</span>*,<span class="keyword">int</span>);         <span class="comment">//函数</span></span><br><span class="line"><span class="keyword">using</span> PF = <span class="keyword">int</span>(*)(<span class="keyword">int</span>*,<span class="keyword">int</span>);     <span class="comment">//指针</span></span><br><span class="line"><span class="keyword">int</span> (*f1(<span class="keyword">int</span>))(<span class="keyword">int</span>*,<span class="keyword">int</span>);        <span class="comment">//等价于下两者</span></span><br><span class="line"><span class="function">F *<span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">PF <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>使用auto和decltype替代函数指针类型：前提是函数返回值和形参列表一致</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（四）</title>
    <url>/2020/04/03/C++%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-基础（四）"><a href="#C-基础（四）" class="headerlink" title="C++基础（四）"></a>C++基础（四）</h1><h2 id="Chapter5-语句"><a href="#Chapter5-语句" class="headerlink" title="Chapter5 语句"></a>Chapter5 语句</h2><h3 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a><strong>简单语句</strong></h3><p>表达式语句、空语句、分号、复合语句（块）</p>
<h3 id="语句作用域"><a href="#语句作用域" class="headerlink" title="语句作用域"></a><strong>语句作用域</strong></h3><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a><strong>条件语句</strong></h3><h4 id="if语句："><a href="#if语句：" class="headerlink" title="if语句："></a>if语句：</h4><p>if语句，else语句，嵌套if（花括号）</p>
<p>垂悬else：与最近的if匹配</p>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a><strong>switch语句</strong></h4><p>中间要有break，最后可有default</p>
<h3 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a><strong>迭代语句</strong></h3><p>while语句：先判断后执行</p>
<p>dowhile语句：先执行后判断</p>
<p>传统for语句（init-&gt;cond-&gt;循环-&gt;expr）:三部分</p>
<p>范围for语句：注意vector时的引用类型</p>
<h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a><strong>跳转语句</strong></h3><p>break，continue，goto语句</p>
<h3 id="try语句和异常处理"><a href="#try语句和异常处理" class="headerlink" title="try语句和异常处理"></a><strong>try语句和异常处理</strong></h3><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><ul>
<li>throw表达式：表示遇到了无法处理的异常</li>
<li>try语句块：处理异常，以catch语句结束，catch语句用来处理异常代码</li>
<li>异常类：在throw和catch之间传递信息</li>
</ul>
<h4 id="throw表达式"><a href="#throw表达式" class="headerlink" title="throw表达式"></a>throw表达式</h4><p>比如：throw runtime_error(“…”)</p>
<h4 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h4><p>try{正常程序}catch(异常声明){处理}catch(异常声明){处理}</p>
<p>实例：输入不合法时再输入一个</p>
<p>err.what()异常的提示值。</p>
<h4 id="标准异常："><a href="#标准异常：" class="headerlink" title="标准异常："></a>标准异常：</h4><p>C++标准库中的一组类,在4个头文件中：</p>
<ul>
<li>exception：exception报告异常发生</li>
<li>stdexcept：几个常用异常类，见下</li>
<li>new：bad_alloc异常</li>
<li>type_info：bad_cast异常</li>
</ul>
<p><stdexcept>中的异常类：</p>
<ul>
<li>exception：常见问题</li>
<li>runtime_error：运行时才能检测出的问题</li>
<li>range_error：生成结果超过值域</li>
<li>overflow_error、underflow_error：计算上溢/下溢</li>
<li>logic_error：程序逻辑错误</li>
<li>domain_error：逻辑错误：参数结果不存在</li>
<li>invalid_argument：无效参数</li>
<li>length_error：试图创建超过该类型最大长度的对象</li>
<li>out_of_range：使用一个超出有效范围的值</li>
</ul>
<p>运算：对异常对象创建、拷贝、赋值</p>
<p>只能默认初始化exception、bad_alloc、bad_cast，不允许初始值</p>
<p>其他异常类型可以用string/c_str初始化，不允许默认初始化</p>
<p>what成员函数：无参数，返回const char*，提供异常文本信息，取决于对象类型</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（三）</title>
    <url>/2020/04/02/C++%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-基础-三"><a href="#C-基础-三" class="headerlink" title="C++基础(三)"></a>C++基础(三)</h1><h2 id="Chapter4-表达式"><a href="#Chapter4-表达式" class="headerlink" title="Chapter4 表达式"></a>Chapter4 表达式</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a><strong>基础</strong></h3><p>优先级、结合律、求值顺序、重载运算符、左值和右值、括号</p>
<p>关于左值和右值：</p>
<p>左值表示一个带地址的对象，右值表示一个不带地址的对象。</p>
<p><a href="https://nettee.github.io/posts/2018/Understanding-lvalues-and-rvalues-in-C-and-C/" target="_blank" rel="noopener">https://nettee.github.io/posts/2018/Understanding-lvalues-and-rvalues-in-C-and-C/</a></p>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h3><p>都是左结合律，按优先级</p>
<ul>
<li>正+、负-</li>
<li>乘*、除/、求余%</li>
<li>加+、减-</li>
</ul>
<p>计算时类型提升（小整数类型-&gt;大整数类型）、返回提升后副本</p>
<h3 id="逻辑和关系运算符"><a href="#逻辑和关系运算符" class="headerlink" title="逻辑和关系运算符"></a><strong>逻辑和关系运算符</strong></h3><ul>
<li>非!（右结合）</li>
<li>小于、小于等于、大于、大于等于（都是左结合）</li>
<li>==、!=（左结合）</li>
<li>&amp;&amp;、||（做结合）</li>
</ul>
<p>短路求值：逻辑与或，无法确定结果时才计算右值</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><strong>赋值运算符</strong></h3><ul>
<li>左侧应当是可修改的左值，不能是字面值/算数表达式/常量</li>
<li>满足右结合律，如a=b=0；</li>
<li>优先级较低</li>
<li>复合运算符：+=、-=….</li>
</ul>
<h3 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a><strong>递增递减运算符</strong></h3><ul>
<li>区分前置和后置版本</li>
<li>优先级高于解引用运算符，*ptr++等价于 *(ptr++)</li>
</ul>
<h3 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a><strong>成员访问运算符</strong></h3><p>ptr-&gt;mem和(*ptr).mem</p>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a><strong>条件运算符</strong></h3><p>cond?expr1:expr2：如果cond=True，执行expr1，否则expr2</p>
<p>在输出表达式中使用时</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt; ((grade&lt;<span class="number">60</span>) ? <span class="string">"fail"</span> : <span class="string">"pass"</span>) ; <span class="comment">//输出pass或fail</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (grade&lt;<span class="number">60</span>) ?<span class="string">"fail"</span> : <span class="string">"pass"</span>;    <span class="comment">//输出1或0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; grade&lt; <span class="number">60</span> ?<span class="string">"fail"</span> : <span class="string">"pass"</span>;      <span class="comment">//错误，比较cout和60</span></span><br></pre></td></tr></table></figure>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a><strong>位运算符</strong></h3><p>左结合律</p>
<ul>
<li>求反~</li>
<li>左移&lt;&lt;、右移&gt;&gt;</li>
<li>与&amp;、或|、异或^</li>
</ul>
<p>移位运算符：左移右边补0，右移左边补0或符号位（带符号数）</p>
<p>优先级比算数低，比关系/赋值/条件高</p>
<h3 id="SIZEOF运算符"><a href="#SIZEOF运算符" class="headerlink" title="SIZEOF运算符"></a><strong>SIZEOF运算符</strong></h3><p>返回表达式或类型名占的字节数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(type);</span><br><span class="line"><span class="keyword">sizeof</span> expr;</span><br></pre></td></tr></table></figure>

<p>基本类型、引用类型（所引用对象空间）、指针（指针本身）、解引用指针（所指向对象）、数组（整个数组，不是指针）、string/vector（返回固定部分大小，不会计算元素）</p>
<p>应用：求数组元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> sz = <span class="keyword">sizeof</span>(ia)/<span class="built_in">size</span>(*ia);</span><br></pre></td></tr></table></figure>

<h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><strong>逗号</strong></h3><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><strong>类型转换</strong></h3><p>隐式转换：</p>
<ul>
<li>比int小的类型会提升</li>
<li>条件中非bool转bool</li>
<li>初始化变成变量类型，赋值转换成左侧对象类型</li>
<li>算术/关系运算有多种类型时转换成一种</li>
<li>函数调用</li>
<li>数组转为指针</li>
<li>指针转换：0/nullptr-&gt;指针，非常量-&gt;*void,任意-&gt;const *void</li>
<li>转成bool：算数0/指针</li>
<li>转成const</li>
<li>类类型转换</li>
</ul>
<h4 id="算数转换：提升为容量最大的类型、"><a href="#算数转换：提升为容量最大的类型、" class="headerlink" title="算数转换：提升为容量最大的类型、"></a>算数转换：提升为容量最大的类型、</h4><ul>
<li>整型提升：提升成int</li>
<li>无符号&gt;带符号时：带符号-&gt;无符号；否则无符号-&gt;带符号</li>
</ul>
<p>实例列表：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span>+<span class="keyword">char</span>;      <span class="comment">//char-&gt;int-&gt;long</span></span><br><span class="line"><span class="keyword">double</span>+<span class="keyword">int</span>;     <span class="comment">//int-&gt;double</span></span><br><span class="line"><span class="keyword">double</span>+<span class="keyword">float</span>;   <span class="comment">//float-&gt;double</span></span><br><span class="line"><span class="keyword">int</span>=<span class="keyword">double</span>;     <span class="comment">//double-&gt;int(截断)</span></span><br><span class="line"><span class="keyword">bool</span>=<span class="keyword">double</span>;     </span><br><span class="line"><span class="keyword">char</span> +<span class="keyword">float</span>;    <span class="comment">//char-&gt;int-&gt;float</span></span><br><span class="line">short+<span class="keyword">char</span>;    <span class="comment">//short-&gt;int,char-&gt;int</span></span><br><span class="line"><span class="keyword">char</span>+<span class="keyword">long</span>;     <span class="comment">//char-&gt;long</span></span><br><span class="line"><span class="keyword">int</span>+<span class="keyword">unsigned</span> <span class="keyword">long</span>; <span class="comment">//int-&gt;unsigned long</span></span><br><span class="line"><span class="keyword">unsigned</span> short +<span class="keyword">int</span>; <span class="comment">//根据空间大小提升</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> + <span class="keyword">long</span>;  <span class="comment">//根据空间大小转换</span></span><br></pre></td></tr></table></figure>

<h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a><strong>显式转换</strong></h3><p>强制类型转换：</p>
<p>cast-name<type>(expr)</p>
<p>type是目标类型，expr是要转换的值，type为引用时结果是左值</p>
<p>cast-name是static_cast,dynamic_cast,const_cast和reinterpret_cast中的一种，了解一下，后面细讲。</p>
<ul>
<li>static_cast:一般是把任意类型转成void类型/找回void*指针</li>
<li>const_cast:改变运算对象的底层const</li>
<li>reinterpret_cast:</li>
</ul>
<p>旧式的强制类型转换：</p>
<p>type (expr);或(type) expr;</p>
<h3 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a><strong>运算符优先级表</strong></h3><p><img src="C:%5CUsers%5CLXF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200403155617039.png" alt="image-20200403155617039"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习</title>
    <url>/2020/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="计算机网络复习"><a href="#计算机网络复习" class="headerlink" title="计算机网络复习"></a>计算机网络复习</h1><h2 id="1-网络基础："><a href="#1-网络基础：" class="headerlink" title="1/网络基础："></a>1/网络基础：</h2><p>OSI体系结构、TCP/IP结构</p>
<h2 id="2-物理层、传输层"><a href="#2-物理层、传输层" class="headerlink" title="2/物理层、传输层"></a>2/物理层、传输层</h2><h2 id="3-链路层"><a href="#3-链路层" class="headerlink" title="3/链路层"></a>3/链路层</h2><h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4/网络层"></a>4/网络层</h2><h2 id="5-传输层"><a href="#5-传输层" class="headerlink" title="5/传输层"></a>5/传输层</h2><h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6/应用层"></a>6/应用层</h2>]]></content>
  </entry>
  <entry>
    <title>C++基础（二）</title>
    <url>/2020/04/01/C++%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-基础（二）"><a href="#C-基础（二）" class="headerlink" title="C++基础（二）"></a>C++基础（二）</h1><h2 id="Chapter3字符串、向量、数组"><a href="#Chapter3字符串、向量、数组" class="headerlink" title="Chapter3字符串、向量、数组"></a>Chapter3字符串、向量、数组</h2><h3 id="命名空间using声明"><a href="#命名空间using声明" class="headerlink" title="命名空间using声明"></a><strong>命名空间using声明</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;   <span class="comment">//可以直接使用cin</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//可以直接使用std</span></span><br></pre></td></tr></table></figure>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a><strong>string</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br></pre></td></tr></table></figure>

<h4 id="定义、初始化"><a href="#定义、初始化" class="headerlink" title="定义、初始化"></a>定义、初始化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;                <span class="comment">//默认初始化，空串</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1;           <span class="comment">//拷贝初始化，s1</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>;            <span class="comment">//直接初始化，s1</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"value"</span>)</span></span>;       <span class="comment">//字面值副本，"value"</span></span><br><span class="line"><span class="built_in">string</span> s3=<span class="string">"value"</span>;        <span class="comment">//拷贝初始化，"value"</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(n,<span class="string">'c'</span>)</span></span>;         <span class="comment">//直接初始化，n个c</span></span><br></pre></td></tr></table></figure>

<h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><ul>
<li>输入输出：os&lt;&lt;s ，is&gt;&gt;s，getline(is,s),</li>
<li>长度：s.empty()，s.size()</li>
<li>s[n]：返回引用</li>
<li>拼接，赋值：s1+s2,s1=s2</li>
<li>比较：大小写敏感s1==s2,s1!=s2</li>
<li>字典序比较，大小写敏感：&lt;，&lt;=，&gt;,&gt;=</li>
</ul>
<h4 id="读写："><a href="#读写：" class="headerlink" title="读写："></a>读写：</h4><p>忽略开头结尾空白，空格、换行、制表符</p>
<p>用while(cin&gt;&gt;word)读取未知数量</p>
<p>用getline(cin,line)读取一整行</p>
<h4 id="empty和size"><a href="#empty和size" class="headerlink" title="empty和size"></a>empty和size</h4><p>size返回的是string::size_type类型，C++11中可以用auto/decltype来推断，实际是无符号整数，比较的时候需要注意不能涉及负数（会自动转为无符号数）。</p>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>长度不同，字母相同，较短的小；某些位置不同，比较第一个相异字符</p>
<h4 id="赋值-amp-相加"><a href="#赋值-amp-相加" class="headerlink" title="赋值&amp;相加"></a>赋值&amp;相加</h4><p>+号两侧至少有一个string，不能字面值直接相加，可通过括号调整</p>
<p>字面值和string类型不同</p>
<h4 id="处理字符-cctype标准函数库，继承自C语言"><a href="#处理字符-cctype标准函数库，继承自C语言" class="headerlink" title="处理字符:cctype标准函数库，继承自C语言"></a>处理字符:cctype标准函数库，继承自C语言</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isalnum</span>(c);    <span class="comment">//字母或数字</span></span><br><span class="line"><span class="built_in">isalpha</span>(c);    <span class="comment">//字母</span></span><br><span class="line"><span class="built_in">iscntrl</span>(c);    <span class="comment">//控制字符</span></span><br><span class="line"><span class="built_in">isdigit</span>(c);    <span class="comment">//数字</span></span><br><span class="line"><span class="built_in">isgraph</span>(c);    <span class="comment">//不是空格但可打印</span></span><br><span class="line"><span class="built_in">islower</span>(c);    <span class="comment">//小写</span></span><br><span class="line"><span class="built_in">isprint</span>(c);    <span class="comment">//可打印</span></span><br><span class="line"><span class="built_in">ispunct</span>(c);    <span class="comment">//标点符号</span></span><br><span class="line"><span class="built_in">isspace</span>(c);    <span class="comment">//空白：空格制表回车换行进纸</span></span><br><span class="line"><span class="built_in">isupper</span>(c);    <span class="comment">//大写</span></span><br><span class="line"><span class="built_in">isxdigit</span>(c);   <span class="comment">//十六进制</span></span><br><span class="line"><span class="built_in">tolower</span>(c);    <span class="comment">//输出大写对应小写，否则不变</span></span><br><span class="line"><span class="built_in">toupper</span>(c)；   <span class="comment">//输出小写对应大写，否则不变</span></span><br></pre></td></tr></table></figure>

<p>处理所有字符：范围for语句：for(auto c:str),C++11</p>
<p>处理部分字符：下标（接收整型值自动转为string::size_type）/迭代器</p>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a><strong>vector</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span></span><br></pre></td></tr></table></figure>

<p>一种类模板，使用时指出将类/函数实例化成何种类型</p>
<h4 id="定义和初始化"><a href="#定义和初始化" class="headerlink" title="定义和初始化"></a>定义和初始化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;              <span class="comment">//默认初始化，空</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v2</span><span class="params">(v1)</span></span>;          <span class="comment">//直接初始化，v1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2 = v1;         <span class="comment">//拷贝初始化，v1</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v3</span><span class="params">(n,val)</span></span>;       <span class="comment">//直接初始化，n个val</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v4</span><span class="params">(n)</span></span>;           <span class="comment">//值初始化，n个初始值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v5&#123;a,b,c&#125;;       <span class="comment">//列表初始化，</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v5 = &#123;a,b,c&#125;;    <span class="comment">//拷贝初始化</span></span><br></pre></td></tr></table></figure>

<p>一些例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1&#123;<span class="number">10</span>&#125;;       <span class="comment">//一个元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1&#123;<span class="number">10</span>&#125;;    <span class="comment">//10个元素</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span> <span class="params">(<span class="number">10</span>)</span></span>;      <span class="comment">//10个元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;v2(<span class="string">"hi"</span>);   <span class="comment">//错误，不能用字面值构造vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3&#123;<span class="number">10</span>,<span class="number">1</span>&#125;;     <span class="comment">//10和1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v3&#123;<span class="number">10</span>,<span class="string">"hi"</span>&#125;;   <span class="comment">//10个"hi"</span></span><br></pre></td></tr></table></figure>

<h4 id="vector操作"><a href="#vector操作" class="headerlink" title="vector操作"></a>vector操作</h4><ul>
<li>大小：v.empty()，v.size();</li>
<li>添加：v.push_back(t);</li>
<li>取值：v[n];</li>
<li>替换：v1 = v2;v1 = {a,b,c};</li>
<li>比较：v1 !=v2;v1 == v2;</li>
<li>&lt;,&lt;=,&gt;,&gt;=;</li>
</ul>
<p>基本与string一致，比较：第一对相异的值/值相同时看长度，使用时注意下标。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h3><p>string和容器类型可用，begin():指向第一个元素，end():指向尾后元素</p>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li>==，!=</li>
<li>*iter，iter-&gt;mem,解引用</li>
<li>++，–</li>
</ul>
<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;         <span class="comment">//读写vector&lt;int&gt;的元素</span></span><br><span class="line"><span class="built_in">string</span>::iterator it2;             <span class="comment">//读写string中的字符</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it3;  <span class="comment">//只能读不能写</span></span><br><span class="line"><span class="built_in">string</span>::const_iterator it4;       <span class="comment">//只能读不能写</span></span><br></pre></td></tr></table></figure>

<p>const对象返回const_iterator，函数cbegin()和cend()返回这种类型。</p>
<p>解引用，获取元素(*iter)</p>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul>
<li>迭代器+/-距离=迭代器</li>
<li>迭代器-迭代器=difference_type的带符号整型</li>
<li>关系运算符返回位置关系</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h3><h4 id="定义和初始化-1"><a href="#定义和初始化-1" class="headerlink" title="定义和初始化"></a>定义和初始化</h4><p>形如a[d]，a是名字，维度d必须是常量表达式。</p>
<p>初始化：默认初始化、列表初始化、不可拷贝/赋值、由内向外读</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptrs[<span class="number">10</span>];                <span class="comment">//10个整型指针</span></span><br><span class="line"><span class="keyword">int</span> &amp;refs[<span class="number">10</span>]= arr;           <span class="comment">//错误，没有引用的数组</span></span><br><span class="line"><span class="keyword">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr;     <span class="comment">//Parray指向10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr;      <span class="comment">//arrRef引用10个整数的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>下标：size_t类型，无符号类型，但下标可以是负数</p>
<p>指针：编译器一般把数组转为指针，指针和迭代器操作一致：解引用、递增、比较、+整数、-指针</p>
<p>指针的标准库函数begin和end</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *beg = <span class="built_in">begin</span>(ia);</span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">end</span> = <span class="built_in">end</span>(ia);</span><br></pre></td></tr></table></figure>

<h4 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h4><p>字符串存放在字符数组并以空字符结尾</p>
<p>char ca[]，其中ca进行各种操作时是指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(p);       <span class="comment">//返回p长度，遇到空字符结束，如果不是以空字符结尾的数					组，有可能会一直沿内存找下去直到遇到空字符。</span></span><br><span class="line"><span class="built_in">strcmp</span>(p1,p2);   <span class="comment">//p1==p2返回0,p1&lt;p2返回负，p1&gt;p2返回正</span></span><br><span class="line"><span class="built_in">strcat</span>(p1,p2);   <span class="comment">//p2附加到p1后，返回p1</span></span><br><span class="line"><span class="built_in">strcpy</span>(p1,p2);   <span class="comment">//p2拷贝给p1,返回p1</span></span><br></pre></td></tr></table></figure>

<p>比较：如果用&gt;,&lt;比较的是指针</p>
<h4 id="旧接口"><a href="#旧接口" class="headerlink" title="旧接口"></a>旧接口</h4><ul>
<li>string-&gt;C风格字符串：string.c_str()</li>
<li>C风格字符串-&gt;string：可以直接转换</li>
<li>数组-&gt;vector: vector<int> iver(begin(arr),end(arr))或者直接用地址</li>
</ul>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a><strong>多维数组</strong></h3><h4 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] =&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;&#125;;    <span class="comment">//初始化每行首元素</span></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] =&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;         <span class="comment">//初始化第一行</span></span><br></pre></td></tr></table></figure>

<h4 id="下标引用："><a href="#下标引用：" class="headerlink" title="下标引用："></a>下标引用：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (&amp;row)[<span class="number">4</span>] = ia[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h4 id="使用范围for语句时"><a href="#使用范围for语句时" class="headerlink" title="使用范围for语句时"></a>使用范围for语句时</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;row :ia)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;col : ia)</span><br><span class="line">    &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>注意要使用引用，否则会返回指针，如果外层不使用引用，内层循环会报错。</p>
<h4 id="多维数组的指针"><a href="#多维数组的指针" class="headerlink" title="多维数组的指针"></a>多维数组的指针</h4><p>定义时注意数组维度。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（一）</title>
    <url>/2020/04/01/C++%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-基础（一）"><a href="#C-基础（一）" class="headerlink" title="C++基础（一）"></a>C++基础（一）</h1><p>复习C++Primer基础部分</p>
<h2 id="Chapter2-基本内置类型："><a href="#Chapter2-基本内置类型：" class="headerlink" title="Chapter2 基本内置类型："></a>Chapter2 基本内置类型：</h2><h3 id="基本内置类型："><a href="#基本内置类型：" class="headerlink" title="基本内置类型："></a>基本内置类型：</h3><p>包括算数类型(arithmetic type)、空类型(void)</p>
<h4 id="算数类型"><a href="#算数类型" class="headerlink" title="算数类型"></a>算数类型</h4><ul>
<li>布尔:bool</li>
<li>字符:char、wchar_t、char16_t、char32_t</li>
<li>整型:short、int、long、long long</li>
<li>浮点:float、double、long double</li>
</ul>
<h4 id="带符号和无符号："><a href="#带符号和无符号：" class="headerlink" title="带符号和无符号："></a>带符号和无符号：</h4><ul>
<li>整型：前加unsigned</li>
<li>字符：char、signed char、unsigned char</li>
</ul>
<h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><ul>
<li>bool与非bool：false&lt;-&gt;0,true&lt;-&gt;非0</li>
<li>浮点与整型：截断/精度损失</li>
<li>超范围值-&gt;无符号/带符号：取模/无定义</li>
</ul>
<h4 id="字面值常量："><a href="#字面值常量：" class="headerlink" title="字面值常量："></a>字面值常量：</h4><ul>
<li>整型：十进制(一般带符号)、八进制(0开头)、十六进制(0x开头)</li>
<li>浮点：科学计数法，eg：3.14159E3=3141.59</li>
<li>字符：’A’</li>
<li>字符串：空字符’\0’结尾，之间仅有空格缩进换行不算。</li>
<li>转义序列：换行\n  回车\r  退格\b 引号</li>
<li>布尔：true、false</li>
<li>指针：nullptr</li>
</ul>
<h4 id="指定类型："><a href="#指定类型：" class="headerlink" title="指定类型："></a>指定类型：</h4><ul>
<li>前缀：u=char16_t  U=char32_t  L=wchar_t  u8==char字符串</li>
<li>后缀：u/U、l/L、ll/LL、f/F、l/L</li>
</ul>
<h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><p>定义、初始化、列表初始化(花括号)、默认初始化（不被初始化例外）</p>
<p>声明和定义的区别、</p>
<p>标识符：字母数字下划线，字母/下划线开头</p>
<p>作用域：作用域标识符</p>
<h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><p>出现在声明语句中</p>
<ul>
<li><p>引用：int&amp;a=b,必须初始化，已存在的对象别名</p>
</li>
<li><p>指针：int*a，不必初始化，一种对象</p>
</li>
</ul>
<p>int* a,b：a是指针，b是int</p>
<p>出现在表达式中：取地址符（&amp;）：得出地址、解引用符（*）：得出对象</p>
<p>空指针：nullptr、NULL（预处理变量）、0</p>
<p>指针的指针、指针的引用、不能引用地址</p>
<h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>const在编译初始时被编译器替换成初始值，<strong>必须初始化</strong>。</p>
<p>希望多文件共享时前加extern关键字</p>
<h4 id="对const的引用："><a href="#对const的引用：" class="headerlink" title="对const的引用："></a><strong>对const的引用</strong>：</h4><p>也叫常量引用，可以指向变量，可以类型不同，不能再赋值，可以初始化字面值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp;p = a;  <span class="comment">//正确，const引用cosnt</span></span><br><span class="line"><span class="keyword">int</span> &amp;q = a;       <span class="comment">//错误，非const引用const</span></span><br><span class="line">p = <span class="number">2</span>;			  <span class="comment">//错误，前加const不能赋值</span></span><br></pre></td></tr></table></figure>

<p>非const引用：类型必须一致，不可赋字面值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = dval;  <span class="comment">//正确，可以类型转换</span></span><br><span class="line"><span class="keyword">int</span> &amp;r1 = dval;		<span class="comment">//错误，绑定临时量/类型不一致</span></span><br></pre></td></tr></table></figure>

<h4 id="对const的指针："><a href="#对const的指针：" class="headerlink" title="对const的指针："></a><strong>对const的指针</strong>：</h4><p>const int *a，不能对p指向的值操作，但可以指向变量</p>
<p>非const指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr = pi;    <span class="comment">//错误，非const不能指向const</span></span><br></pre></td></tr></table></figure>

<p><strong>const指针</strong>：int *const a，不能对p操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;i; </span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> q = &amp;i;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">0</span>;    <span class="comment">//错误</span></span><br><span class="line">p = &amp;j;    <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">*q = <span class="number">0</span>;    <span class="comment">//错误</span></span><br><span class="line">q = &amp;j;    <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>

<p>顶层const：int *const p;</p>
<p>底层const：const int *p;</p>
<p>常量表达式：值不改变，编译时能得到结果，函数赋值给const不算</p>
<p>constexpr：在编译时进行计算常量表达式、C++11，只允许字面值</p>
<p>constexpr指针：顶层const</p>
<h3 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h3><h4 id="类型别名："><a href="#类型别名：" class="headerlink" title="类型别名："></a>类型别名：</h4><ul>
<li><p>typedef 原名 别名</p>
</li>
<li><p>using 别名=原名</p>
</li>
</ul>
<h4 id="指针、常量、类型别名"><a href="#指针、常量、类型别名" class="headerlink" title="指针、常量、类型别名"></a>指针、常量、类型别名</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pstring;   <span class="comment">// pstring = char*</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* pstring;   <span class="comment">// pstring = char*</span></span><br></pre></td></tr></table></figure>

<h4 id="auto类型："><a href="#auto类型：" class="headerlink" title="auto类型："></a>auto类型：</h4><p>C++11，自动类型，声明多个变量时类型需要一致。</p>
<p>忽略顶层const，保留底层const，不保留引用</p>
<h4 id="decltype类型指示符："><a href="#decltype类型指示符：" class="headerlink" title="decltype类型指示符："></a>decltype类型指示符：</h4><p>C++11、分析表达式/函数的返回类型。</p>
<p>返回顶层const和引用，返回引用类型可以将其作为表达式一部分，加括号时返回引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r+<span class="number">0</span>) b;<span class="comment">//返回int</span></span><br><span class="line"><span class="keyword">decltype</span>(*p) c;<span class="comment">//错误，返回引用，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d; <span class="comment">//错误，返回引用，必须初始化</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义数据结构"><a href="#自定义数据结构" class="headerlink" title="自定义数据结构"></a>自定义数据结构</h3><h4 id="struct："><a href="#struct：" class="headerlink" title="struct："></a>struct：</h4><p>两种定义方式，记得带分号</p>
<p>类内初始值：C++11</p>
<h4 id="编写头文件："><a href="#编写头文件：" class="headerlink" title="编写头文件："></a>编写头文件：</h4><p>预处理器概述：#define的用法、#ifdef和#ifndef和#endif的定义，无视作用域</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/03/31/Linux/</url>
    <content><![CDATA[<h1 id="Linux-配置"><a href="#Linux-配置" class="headerlink" title="Linux 配置"></a>Linux 配置</h1><p>基本工具配置和命令待查</p>
<ul>
<li>zsh &amp; oh-my-zsh</li>
<li>tmux</li>
<li>shadowsocks</li>
</ul>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>

<p>oh-my-zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh </span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>zsh-syntax-highlighting：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>zsh-autosuggestions</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>vi ~/.zshrc</p>
<p>plugins=(git extract zsh-syntax-highlighting zsh-autosuggestions)</p>
<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>sudo apt-get install tmux</p>
<h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2>]]></content>
      <categories>
        <category>Linux</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
