<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuMuNan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yoursite.com/"/>
  <updated>2020-04-01T05:09:24.904Z</updated>
  <id>https://yoursite.com/</id>
  
  <author>
    <name>LiuMuNan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络复习</title>
    <link href="https://yoursite.com/2020/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://yoursite.com/2020/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-04-01T05:09:24.000Z</published>
    <updated>2020-04-01T05:09:24.904Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://yoursite.com/2020/03/31/Linux/"/>
    <id>https://yoursite.com/2020/03/31/Linux/</id>
    <published>2020-03-31T05:48:28.000Z</published>
    <updated>2020-03-31T07:42:22.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-配置"><a href="#Linux-配置" class="headerlink" title="Linux 配置"></a>Linux 配置</h1><p>由于多次重装Linux系统，或者部署环境需要，把重复的配置过程记录一下：</p><ul><li>zsh &amp; oh-my-zsh</li><li>shadowsocks</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-配置&quot;&gt;&lt;a href=&quot;#Linux-配置&quot; class=&quot;headerlink&quot; title=&quot;Linux 配置&quot;&gt;&lt;/a&gt;Linux 配置&lt;/h1&gt;&lt;p&gt;由于多次重装Linux系统，或者部署环境需要，把重复的配置过程记录一下：&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="https://yoursite.com/categories/Linux/"/>
    
      <category term="Tool" scheme="https://yoursite.com/categories/Linux/Tool/"/>
    
    
      <category term="Linux" scheme="https://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++基础（一）</title>
    <link href="https://yoursite.com/2020/03/31/C++%E5%9F%BA%E7%A1%80/"/>
    <id>https://yoursite.com/2020/03/31/C++%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-31T05:48:28.000Z</published>
    <updated>2020-04-01T12:34:41.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-基础（一）"><a href="#C-基础（一）" class="headerlink" title="C++基础（一）"></a>C++基础（一）</h1><p>复习C++Primer基础部分</p><h2 id="Chapter2-基本内置类型："><a href="#Chapter2-基本内置类型：" class="headerlink" title="Chapter2 基本内置类型："></a>Chapter2 基本内置类型：</h2><h3 id="1-基本内置类型："><a href="#1-基本内置类型：" class="headerlink" title="1/基本内置类型："></a>1/基本内置类型：</h3><p>包括算数类型(arithmetic type)、空类型(void)</p><h4 id="算数类型"><a href="#算数类型" class="headerlink" title="算数类型"></a>算数类型</h4><ul><li>布尔:bool</li><li>字符:char、wchar_t、char16_t、char32_t</li><li>整型:short、int、long、long long</li><li>浮点:float、double、long double</li></ul><h4 id="带符号和无符号："><a href="#带符号和无符号：" class="headerlink" title="带符号和无符号："></a>带符号和无符号：</h4><ul><li>整型：前加unsigned</li><li>字符：char、signed char、unsigned char</li></ul><h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><ul><li>bool与非bool：false&lt;-&gt;0,true&lt;-&gt;非0</li><li>浮点与整型：截断/精度损失</li><li>超范围值-&gt;无符号/带符号：取模/无定义</li></ul><h4 id="字面值常量："><a href="#字面值常量：" class="headerlink" title="字面值常量："></a>字面值常量：</h4><ul><li>整型：十进制(一般带符号)、八进制(0开头)、十六进制(0x开头)</li><li>浮点：科学计数法，eg：3.14159E3=3141.59</li><li>字符：’A’</li><li>字符串：空字符’\0’结尾，之间仅有空格缩进换行不算。</li><li>转义序列：换行\n  回车\r  退格\b 引号</li><li>布尔：true、false</li><li>指针：nullptr</li></ul><h4 id="指定类型："><a href="#指定类型：" class="headerlink" title="指定类型："></a>指定类型：</h4><ul><li>前缀：u=char16_t  U=char32_t  L=wchar_t  u8==char字符串</li><li>后缀：u/U、l/L、ll/LL、f/F、l/L</li></ul><h3 id="2-变量："><a href="#2-变量：" class="headerlink" title="2/变量："></a>2/变量：</h3><p>定义、初始化、列表初始化(花括号)、默认初始化（不被初始化例外）</p><p>声明和定义的区别、</p><p>标识符：字母数字下划线，字母/下划线开头</p><p>作用域：作用域标识符</p><h3 id="3-复合类型"><a href="#3-复合类型" class="headerlink" title="3/复合类型"></a>3/复合类型</h3><p>出现在声明语句中</p><ul><li><p>引用：int&amp;a=b,必须初始化，已存在的对象别名</p></li><li><p>指针：int*a，不必初始化，一种对象</p></li></ul><p>int* a,b：a是指针，b是int</p><p>出现在表达式中：取地址符（&amp;）：得出地址、解引用符（*）：得出对象</p><p>空指针：nullptr、NULL（预处理变量）、0</p><p>指针的指针、指针的引用、不能引用地址</p><h3 id="4-const限定符"><a href="#4-const限定符" class="headerlink" title="4/const限定符"></a>4/const限定符</h3><p>const在编译初始时被编译器替换成初始值，<strong>必须初始化</strong>。</p><p>希望多文件共享时前加extern关键字</p><h4 id="对const的引用："><a href="#对const的引用：" class="headerlink" title="对const的引用："></a><strong>对const的引用</strong>：</h4><p>也叫常量引用，可以指向变量，可以类型不同，不能再赋值，可以初始化字面值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp;p = a;  <span class="comment">//正确，const引用cosnt</span></span><br><span class="line"><span class="keyword">int</span> &amp;q = a;       <span class="comment">//错误，非const引用const</span></span><br><span class="line">p = <span class="number">2</span>;  <span class="comment">//错误，前加const不能赋值</span></span><br></pre></td></tr></table></figure><p>非const引用：类型必须一致，不可赋字面值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = dval;  <span class="comment">//正确，可以类型转换</span></span><br><span class="line"><span class="keyword">int</span> &amp;r1 = dval;<span class="comment">//错误，绑定临时量/类型不一致</span></span><br></pre></td></tr></table></figure><h4 id="对const的指针："><a href="#对const的指针：" class="headerlink" title="对const的指针："></a><strong>对const的指针</strong>：</h4><p>const int *a，不能对p指向的值操作，但可以指向变量</p><p>非const指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr = pi;    <span class="comment">//错误，非const不能指向const</span></span><br></pre></td></tr></table></figure><p><strong>const指针</strong>：int *const a，不能对p操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;i; </span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> q = &amp;i;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">0</span>;    <span class="comment">//错误</span></span><br><span class="line">p = &amp;j;    <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">*q = <span class="number">0</span>;    <span class="comment">//错误</span></span><br><span class="line">q = &amp;j;    <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>顶层const：int *const p;</p><p>底层const：const int *p;</p><p>常量表达式：值不改变，编译时能得到结果，函数赋值给const不算</p><p>constexpr：在编译时进行计算常量表达式、C++11，只允许字面值</p><p>constexpr指针：顶层const</p><h3 id="5-处理类型"><a href="#5-处理类型" class="headerlink" title="5/处理类型"></a>5/处理类型</h3><h4 id="类型别名："><a href="#类型别名：" class="headerlink" title="类型别名："></a>类型别名：</h4><ul><li><p>typedef 原名 别名</p></li><li><p>using 别名=原名</p></li></ul><h4 id="指针、常量、类型别名"><a href="#指针、常量、类型别名" class="headerlink" title="指针、常量、类型别名"></a>指针、常量、类型别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pstring;   <span class="comment">// pstring = char*</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* pstring;   <span class="comment">// pstring = char*</span></span><br></pre></td></tr></table></figure><h4 id="auto类型："><a href="#auto类型：" class="headerlink" title="auto类型："></a>auto类型：</h4><p>C++11，自动类型，声明多个变量时类型需要一致。</p><p>忽略顶层const，保留底层const，不保留引用</p><h4 id="decltype类型指示符："><a href="#decltype类型指示符：" class="headerlink" title="decltype类型指示符："></a>decltype类型指示符：</h4><p>C++11、分析表达式/函数的返回类型。</p><p>返回顶层const和引用，返回引用类型可以将其作为表达式一部分，加括号时返回引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r+<span class="number">0</span>) b;<span class="comment">//返回int</span></span><br><span class="line"><span class="keyword">decltype</span>(*p) c;<span class="comment">//错误，返回引用，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d; <span class="comment">//错误，返回引用，必须初始化</span></span><br></pre></td></tr></table></figure><h3 id="6-自定义数据结构"><a href="#6-自定义数据结构" class="headerlink" title="6/自定义数据结构"></a>6/自定义数据结构</h3><h4 id="struct："><a href="#struct：" class="headerlink" title="struct："></a>struct：</h4><p>两种定义方式，记得带分号</p><p>类内初始值：C++11</p><h4 id="编写头文件："><a href="#编写头文件：" class="headerlink" title="编写头文件："></a>编写头文件：</h4><p>预处理器概述：#define的用法、#ifdef和#ifndef和#endif的定义，无视作用域</p><h2 id="Chapter3字符串、向量、数组"><a href="#Chapter3字符串、向量、数组" class="headerlink" title="Chapter3字符串、向量、数组"></a>Chapter3字符串、向量、数组</h2><h3 id="1-命名空间using声明"><a href="#1-命名空间using声明" class="headerlink" title="1/命名空间using声明"></a>1/命名空间using声明</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;   <span class="comment">//可以直接使用cin</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//可以直接使用std</span></span><br></pre></td></tr></table></figure><h3 id="2-string"><a href="#2-string" class="headerlink" title="2/string"></a>2/string</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><h4 id="定义、初始化"><a href="#定义、初始化" class="headerlink" title="定义、初始化"></a>定义、初始化</h4><p>直接/间接初始化：无有等号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;                <span class="comment">//默认空串</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1;           <span class="comment">//副本</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>;            <span class="comment">//副本</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"value"</span>)</span></span>;       <span class="comment">//字面值副本</span></span><br><span class="line"><span class="built_in">string</span> s3=<span class="string">"value"</span>;        <span class="comment">//副本</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(n,<span class="string">'c'</span>)</span></span>;         <span class="comment">//n个c</span></span><br></pre></td></tr></table></figure><h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><ul><li>输入输出：os&lt;&lt;s ，is&gt;&gt;s，getline(is,s),</li><li>长度：s.empty()，s.size()</li><li>s[n]：返回引用</li><li>拼接，赋值：s1+s2,s1=s2</li><li>比较：大小写敏感s1==s2,s1!=s2</li><li>字典序比较，大小写敏感：&lt;，&lt;=，&gt;,&gt;=</li></ul><h4 id="读写："><a href="#读写：" class="headerlink" title="读写："></a>读写：</h4><p>忽略开头结尾空白，空格、换行、制表符</p><p>用while(cin&gt;&gt;word)读取未知数量</p><p>用getline(cin,line)读取一整行</p><h4 id="empty和size操作"><a href="#empty和size操作" class="headerlink" title="empty和size操作"></a>empty和size操作</h4><p>size返回的是string::size_type类型，C++11中可以用auto/decltype来推断，实际是无符号整数，比较的时候需要注意。</p><h4 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h4><p>长度不同，字母相同，较短的小；某些位置不同，比较第一个相异字符</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><h4 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h4><p>+号两侧至少有一个string，不能字面值直接相加，可通过括号调整</p><p>字面值和string类型不同</p><h4 id="处理字符-cctype标准函数库，继承自C语言"><a href="#处理字符-cctype标准函数库，继承自C语言" class="headerlink" title="处理字符:cctype标准函数库，继承自C语言"></a>处理字符:cctype标准函数库，继承自C语言</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isalnum</span>(c);    <span class="comment">//字母或数字</span></span><br><span class="line"><span class="built_in">isalpha</span>(c);    <span class="comment">//字母</span></span><br><span class="line"><span class="built_in">iscntrl</span>(c);    <span class="comment">//控制字符</span></span><br><span class="line"><span class="built_in">isdigit</span>(c);    <span class="comment">//数字</span></span><br><span class="line"><span class="built_in">isgraph</span>(c);    <span class="comment">//不是空格但可打印</span></span><br><span class="line"><span class="built_in">islower</span>(c);    <span class="comment">//小写</span></span><br><span class="line"><span class="built_in">isprint</span>(c);    <span class="comment">//可打印</span></span><br><span class="line"><span class="built_in">ispunct</span>(c);    <span class="comment">//标点符号</span></span><br><span class="line">isspact(c);    <span class="comment">//空白：空格制表回车换行进纸</span></span><br><span class="line"><span class="built_in">isupper</span>(c);    <span class="comment">//大写</span></span><br><span class="line"><span class="built_in">isxdigit</span>(c);   <span class="comment">//十六进制</span></span><br><span class="line"><span class="built_in">tolower</span>(c);    <span class="comment">//输出大写对应小写，否则不变</span></span><br><span class="line"><span class="built_in">toupper</span>(c)；   <span class="comment">//输出小写对应大写，否则不变</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-基础（一）&quot;&gt;&lt;a href=&quot;#C-基础（一）&quot; class=&quot;headerlink&quot; title=&quot;C++基础（一）&quot;&gt;&lt;/a&gt;C++基础（一）&lt;/h1&gt;&lt;p&gt;复习C++Primer基础部分&lt;/p&gt;
&lt;h2 id=&quot;Chapter2-基本内置类型：&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="C++" scheme="https://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="https://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yoursite.com/2020/03/31/hello-world/"/>
    <id>https://yoursite.com/2020/03/31/hello-world/</id>
    <published>2020-03-31T05:04:59.545Z</published>
    <updated>2020-03-31T05:04:59.546Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
